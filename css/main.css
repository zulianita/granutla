body {
  background: white; }

h1 {
  color: #6a3a20; }

em strong {
  color: #6a3a20; }

.call-to-action {
  border: 3px solid #ffd000;
  color: #c46524; }

.call-to-action:hover {
  background: #ffd000;
  color: #6a3a20; }

.slogan {
  color: #c46524; }

nav.main a {
  background: #ffd000;
  color: #6a3a20; }
nav.main a:hover {
  color: #c46524; }
nav.main a:visited {
  color: auto; }
nav.main a:before,
nav.main a:after {
  background: #ffd000; }

.menuToggle {
  background: #ffd000; }

body {
  font: "Open Sans"; }

p {
  font-family: "Open Sans";
  font-size: 15px;
  line-height: 1.5em; }

nav.main {
  font-family: "Roboto Slab", serif;
  font-weight: 400; }

footer nav {
  font-family: "Roboto Slab", serif; }
  footer nav a {
    text-decoration: none; }

.slogan {
  font-family: "Roboto Slab", serif;
  font-size: 20px;
  text-align: center; }

.menuToggle {
  font-size: 12px; }

h1 {
  font-family: "Roboto Slab", serif;
  font-size: 25px;
  font-weight: 400; }

.txt-center {
  text-align: center; }

em strong {
  letter-spacing: 0.01em;
  font-family: "Roboto Slab", serif;
  font-weight: 400;
  font-size: 16px;
  margin: auto; }

.call-to-action {
  font-family: "Roboto Slab", serif;
  font-size: 20px; }

#hello {
  clear: both;
  display: block; }

@media screen and (min-width: 768px) {
  span.slogan {
    text-align: left; } }
@media screen and (min-width: 1024px) {
  span.slogan {
    font-size: 24px; } }
@-webkit-keyframes fade-in {
  0% {
    opacity: 0; }

  90% {
    opacity: 1; } }
@-moz-keyframes fade-in {
  0% {
    opacity: 0; }

  90% {
    opacity: 1; } }
@-ms-keyframes fade-in {
  0% {
    opacity: 0; }

  90% {
    opacity: 1; } }
@-o-keyframes fade-in {
  0% {
    opacity: 0; }

  90% {
    opacity: 1; } }
@keyframes fade-in {
  0% {
    opacity: 0; }

  90% {
    opacity: 1; } }
#toggle ~ ul {
  opacity: 0; }

#toggle:checked ~ ul {
  opacity: 1;
  -webkit-animation: fade-in 1s 1;
  -moz-animation: fade-in 1s 1;
  -ms-animation: fade-in 1s 1;
  -o-animation: fade-in 1s 1;
  animation: fade-in 1s 1; }

/* ==========================================================================
   Grid
   ========================================================================== */
/*
 * Example uses:
 *
 * <div class="grid">
 *     <div class="grid__cell unit-1-2"></div>
 *     <div class="grid__cell unit-1-2"></div>
 *     <div class="grid__cell unit-1-3"></div>
 *     <div class="grid__cell unit-1-3"></div>
 * </div>
 *
 * <div class="grid grid--center">
 *     <div class="grid__cell unit-1-3"></div>
 *     <div class="grid__cell unit-1-3"></div>
 * </div>
 */
/* Grid core
   ========================================================================== */
/**
 * Grid container
 * Must only contain `.grid` or `.grid__cell` components as children.
 *
 * 1. Adjustment for child element margins.
 * 2. Ensure consistent default alignment/
 * 3. Remove inter-unit whitespace that appears between `inline-block` child
 *    elements. Work for all non-monospace font-families.  If you're using a
 *    monospace base font, you will need to set the `grid` font-family to
 *   `sans-serif` and then redeclare the monospace font on the `grid__cell`
 *    objects.
 * 4. Protect against WebKit bug with optimizelegibility.
 */
.grid {
  display: block;
  padding: 0;
  margin: 0 -10px;
  /* 1 */
  text-align: left;
  /* 2 */
  letter-spacing: -0.31em;
  /* 3 */
  text-rendering: optimizespeed;
  /* 4 */ }

/**
 * Opera hack
 */
.opera:-o-prefocus,
.grid {
  word-spacing: -0.43em;
  /* 3 */ }

/**
 * Child `grid` object adjustments
 * Used for more complex fixed-fluid hybrid grids.
 */
.grid > .grid {
  overflow: hidden;
  margin-right: 0;
  margin-left: 0; }

/**
 * Grid units
 * No explicit width by default. Apply `.unit-x-y` classes.
 *
 * 1. Fundamentals of the non-float grid layout mechanism.
 * 2. Apply grid gutter.
 * 3. Controls vertical positioning of units.
 * 4. Keeps content correctly aligned with the grid direction.
 * 5. Reset text defaults.
 */
.grid__cell {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 100%;
  display: inline-block;
  /* 1 */
  margin: 0;
  padding: 0 10px;
  /* 2 */
  vertical-align: top;
  /* 3 */
  text-align: left;
  /* 4 */
  letter-spacing: normal;
  /* 5 */
  word-spacing: normal;
  /* 5 */
  text-rendering: auto;
  /* 5 */ }

/* Grid modifiers
   ========================================================================== */
/**
 * Modifier: horizontally center all grid units
 * Allows for automatic unit centering irrespective of the number of
 * units in the grid.
 */
.grid--center {
  text-align: center; }

/**
 * Modifier: align horizontally all grid units to the left
 */
.grid--left {
  text-align: left; }

/**
 * Modifier: align horizontally all grid units to the right
 */
.grid--right {
  text-align: right; }

/* Grid cell modifiers
   ========================================================================== */
/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */
.grid__cell--center {
  display: block;
  margin: 0 auto; }

/**
 * Modifier: align horizontally one unit to the left
 * Set a specific unit to be horizontally on the left. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */
.grid__cell--left {
  display: block;
  margin-right: auto; }

/**
 * Modifier: align horizontally one unit to the right
 * Set a specific unit to be horizontally on the right. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */
.grid__cell--right {
  display: block;
  margin-left: auto; }

* {
  -webkit-box-sizing: border-box;
  /* Safari/Chrome, other WebKit */
  -moz-box-sizing: border-box;
  /* Firefox, other Gecko */
  box-sizing: border-box;
  /* Opera/IE 8+ */ }

.wrap {
  margin: 0 5%;
  width: 90%; }

img {
  max-width: 100%;
  display: block; }

header.main {
  text-align: center; }
  header.main .logo {
    display: block;
    margin: 12px auto 6px auto;
    position: relative;
    width: 220px; }

.slogan {
  display: inline-block;
  margin: 6px auto 5px auto;
  width: 100%; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav.main {
  margin: 10px 0 10px 0;
  text-transform: uppercase; }
  nav.main ul {
    display: none; }
  nav.main li {
    font-size: 22px;
    margin: 10px 0;
    padding: 0 41px;
    position: relative;
    width: 100%; }
  nav.main a {
    display: block;
    padding: 12px 0;
    text-decoration: none;
    width: 100%; }

footer nav li {
  display: inline-block; }

.menuToggle {
  cursor: pointer;
  display: block;
  padding: 5px 5px;
  position: absolute;
  right: 0;
  top: 0; }

#toggle {
  position: absolute;
  margin-left: -999999px; }

#toggle:checked ~ ul {
  display: block; }

.svg nav.main a:before,
.svg nav.main a:after {
  background: transparent url("../img/menu_item_ends.svg");
  background-size: 100%;
  background-repeat: none;
  content: "";
  display: inline-block;
  height: 100%;
  overflow: hidden;
  position: absolute;
  top: 0;
  width: 43px; }

.svg nav.main a:before {
  left: 0; }

.svg nav.main a:after {
  right: 0;
  background-position: -85px -28%; }

.svg nav.main li:nth-child(2n+2) a:before {
  background-position: left 34%; }

.svg nav.main li:nth-child(2n+2) a:after {
  background-position: left -61%; }

.svg .separator {
  background: transparent url("../img/separator_center.svg");
  background-repeat: repeat-x;
  height: 13px;
  margin: 14px auto 17px auto;
  position: relative;
  width: 85%; }
  .svg .separator:before, .svg .separator:after {
    background-repeat: no-repeat;
    content: "";
    display: block;
    height: 13px;
    position: absolute;
    width: 28px; }
  .svg .separator:before {
    background: url("../img/separator_left.svg") no-repeat;
    left: -21px; }
  .svg .separator:after {
    background: url("../img/separator_right.svg") no-repeat;
    right: -22px;
    top: -1px; }

.call-to-action {
  display: block;
  height: 45px;
  line-height: 40px;
  margin: auto;
  width: 90px; }

.borderradius .call-to-action {
  border-radius: 45px;
  height: 90px;
  line-height: 85px;
  padding: 30px auto; }

.left {
  display: block;
  float: left; }

.right {
  display: block;
  float: right; }

@media screen and (min-width: 768px) {
  .wrap {
    max-width: 768px;
    margin: auto; }

  .svg .separator {
    width: 96%; }

  header.main {
    text-align: left; }
    header.main .logo {
      display: inline-block;
      margin: 16px 0 0 0;
      width: 25%; }
    header.main .slogan {
      display: inline-block;
      margin: 0;
      padding: 0 0 0 1%;
      position: relative;
      width: 74%; }

  .inline-block-bottom {
    vertical-align: bottom; }

  /* Proportional units
     ========================================================================== */
  /*
   * Specify the proportional width of an object.
   * Primarily for, but not limited to, use with `.grid__cell` components.
   * Intentional redundancy build into each set of unit classes.
   */
  .unit-1-2--tablet, .unit-2-4--tablet {
    width: 50%; }

  .unit-1-3--tablet {
    width: 33.33333%; }

  .unit-2-3--tablet {
    width: 66.66667%; }

  .unit-1-4--tablet {
    width: 25%; }

  .unit-3-4--tablet {
    width: 75%; } }
@media screen and (min-width: 1024px) {
  .wrap {
    max-width: 1024px; }

  /* Proportional units
     ========================================================================== */
  /*
   * Specify the proportional width of an object.
   * Primarily for, but not limited to, use with `.grid__cell` components.
   * Intentional redundancy build into each set of unit classes.
   */
  .unit-1-2--desktop, .unit-2-4--desktop {
    width: 50%; }

  .unit-1-3--desktop {
    width: 33.33333%; }

  .unit-2-3--desktop {
    width: 66.66667%; }

  .unit-1-4--desktop {
    width: 25%; }

  .unit-3-4--desktop {
    width: 75%; } }
